package com.firelotto;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple11;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class Lottery extends Contract {
    private static final String BINARY = "";

    protected Lottery(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Lottery(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<LogTransferEventResponse> getLogTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogTransfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<LogTransferEventResponse> responses = new ArrayList<LogTransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogTransferEventResponse typedResponse = new LogTransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gameIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.riseAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.technicalAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.dividendsAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.prAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogTransferEventResponse> logTransferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogTransfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogTransferEventResponse>() {
            @Override
            public LogTransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                LogTransferEventResponse typedResponse = new LogTransferEventResponse();
                typedResponse.log = log;
                typedResponse.gameIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.riseAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.technicalAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.dividendsAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.prAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogDrawEventResponse> getLogDrawEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogDraw", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<LogDrawEventResponse> responses = new ArrayList<LogDrawEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogDrawEventResponse typedResponse = new LogDrawEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gameIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.startTime = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.bitcoinBlockIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.numbers = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.riseAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.transferAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.addToJackpotAmount = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.addToReserveAmount = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogDrawEventResponse> logDrawEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogDraw", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogDrawEventResponse>() {
            @Override
            public LogDrawEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                LogDrawEventResponse typedResponse = new LogDrawEventResponse();
                typedResponse.log = log;
                typedResponse.gameIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.startTime = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.bitcoinBlockIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.numbers = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.riseAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.transferAmount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.addToJackpotAmount = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.addToReserveAmount = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogReserveUsedEventResponse> getLogReserveUsedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogReserveUsed", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<LogReserveUsedEventResponse> responses = new ArrayList<LogReserveUsedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogReserveUsedEventResponse typedResponse = new LogReserveUsedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gameIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogReserveUsedEventResponse> logReserveUsedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogReserveUsed", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogReserveUsedEventResponse>() {
            @Override
            public LogReserveUsedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                LogReserveUsedEventResponse typedResponse = new LogReserveUsedEventResponse();
                typedResponse.log = log;
                typedResponse.gameIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<BigInteger> ticketCountMax() {
        final Function function = new Function("ticketCountMax", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple11<BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>> games(BigInteger param0) {
        final Function function = new Function("games", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple11<BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>>(
                new Callable<Tuple11<BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple11<BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple11<BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (byte[]) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (BigInteger) results.get(8).getValue(), 
                                (BigInteger) results.get(9).getValue(), 
                                (String) results.get(10).getValue());
                    }
                });
    }

    public RemoteCall<String> drawer() {
        final Function function = new Function("drawer", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> technicalPercent() {
        final Function function = new Function("technicalPercent", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> isNeedCloseCurrentGame() {
        final Function function = new Function("isNeedCloseCurrentGame", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<byte[]> getWinNumbers(String bitcoinBlockHash, BigInteger numbersCount, BigInteger numbersCountMax) {
        final Function function = new Function("getWinNumbers", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(bitcoinBlockHash), 
                new org.web3j.abi.datatypes.generated.Uint256(numbersCount), 
                new org.web3j.abi.datatypes.generated.Uint256(numbersCountMax)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<Boolean> buyEnable() {
        final Function function = new Function("buyEnable", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> winPercent(BigInteger param0) {
        final Function function = new Function("winPercent", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> prWallet() {
        final Function function = new Function("prWallet", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> gameIndex() {
        final Function function = new Function("gameIndex", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> jackpotGuaranteed() {
        final Function function = new Function("jackpotGuaranteed", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> checkGameIndex() {
        final Function function = new Function("checkGameIndex", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> closeTime() {
        final Function function = new Function("closeTime", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<List> getWins(BigInteger gameIndex, BigInteger offset, BigInteger count) {
        final Function function = new Function("getWins", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(gameIndex), 
                new org.web3j.abi.datatypes.generated.Uint256(offset), 
                new org.web3j.abi.datatypes.generated.Uint256(count)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Boolean> isNeedDrawGame(BigInteger bitcoinBlockIndex) {
        final Function function = new Function("isNeedDrawGame", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(bitcoinBlockIndex)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> startTime() {
        final Function function = new Function("startTime", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> gameIndexToBuy() {
        final Function function = new Function("gameIndexToBuy", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> technicalWallet() {
        final Function function = new Function("technicalWallet", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> addReserve(BigInteger weiValue) {
        final Function function = new Function(
                "addReserve", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> closeCurrentGame(BigInteger bitcoinBlockIndex) {
        final Function function = new Function(
                "closeCurrentGame", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(bitcoinBlockIndex)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setJackpotGuaranteed(BigInteger _jackpotGuaranteed) {
        final Function function = new Function(
                "setJackpotGuaranteed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_jackpotGuaranteed)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> disableBuyingTime() {
        final Function function = new Function("disableBuyingTime", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<List> getPlayerTickets(String player, BigInteger offset, BigInteger count) {
        final Function function = new Function("getPlayerTickets", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(player), 
                new org.web3j.abi.datatypes.generated.Uint256(offset), 
                new org.web3j.abi.datatypes.generated.Uint256(count)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Int256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> getGames(BigInteger offset, BigInteger count) {
        final Function function = new Function("getGames", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(offset), 
                new org.web3j.abi.datatypes.generated.Uint256(count)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addBalance(BigInteger weiValue) {
        final Function function = new Function(
                "addBalance", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> buyTicket(List<BigInteger> numbers, String bonusAddress, BigInteger weiValue) {
        final Function function = new Function(
                "buyTicket", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(numbers, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.Address(bonusAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> numbersCount() {
        final Function function = new Function("numbersCount", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> drawGame(BigInteger bitcoinBlockIndex, String bitcoinBlockHash) {
        final Function function = new Function(
                "drawGame", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(bitcoinBlockIndex), 
                new org.web3j.abi.datatypes.Utf8String(bitcoinBlockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> prPercent() {
        final Function function = new Function("prPercent", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> dividendsWallet() {
        final Function function = new Function("dividendsWallet", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> nextPrice() {
        final Function function = new Function("nextPrice", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> dividendsPercent() {
        final Function function = new Function("dividendsPercent", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                "transferOwnership", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> numbersCountMax() {
        final Function function = new Function("numbersCountMax", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setDrawer(String _drawer) {
        final Function function = new Function(
                "setDrawer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_drawer)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> intervalTime() {
        final Function function = new Function("intervalTime", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> noDuplicates(byte[] array) {
        final Function function = new Function("noDuplicates", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(array)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public static RemoteCall<Lottery> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Lottery.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Lottery> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Lottery.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static Lottery load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Lottery(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Lottery load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Lottery(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class LogTransferEventResponse {
        public Log log;

        public BigInteger gameIndex;

        public BigInteger riseAmount;

        public BigInteger technicalAmount;

        public BigInteger dividendsAmount;

        public BigInteger prAmount;
    }

    public static class LogDrawEventResponse {
        public Log log;

        public BigInteger gameIndex;

        public BigInteger startTime;

        public BigInteger bitcoinBlockIndex;

        public byte[] numbers;

        public BigInteger riseAmount;

        public BigInteger transferAmount;

        public BigInteger addToJackpotAmount;

        public BigInteger addToReserveAmount;
    }

    public static class LogReserveUsedEventResponse {
        public Log log;

        public BigInteger gameIndex;

        public BigInteger amount;
    }
}
